pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <-
rast("D:\\Bud\\template_raster\\CA_forest_VLCE_2015.tif")
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
to_process
age_df <- to_process %>%
filter(var == "age") %>%
distinct(var, zone)
age_df
age_df <- to_process %>%
filter(var == "age") %>%
#distinct(var, zone) %>%
mutate(path_in = here::here("G:/", "national_predicted_age", ))
to_process %>%
filter(var == "age")
age_df <- to_process %>%
filter(var == "age") %>%
#distinct(var, zone) %>%
mutate(path_in = here::here("G:/", "national_predicted_age", glue::glue("UTM_{zone}_Age.dat")))
age_df
age_df <- to_process %>%
filter(var == "age") %>%
#distinct(var, zone) %>%
mutate(path_in = here::here("G:/", "national_predicted_age", glue::glue("UTM_{zone}_Age.dat")),
path_out = here::here(outpath, zone, var, glue::glue("UTM_{zone}_Age.dat")))
age_df
age_df <- to_process %>%
filter(var == "age") %>%
distinct(var, zone) %>%
mutate(path_in = here::here("G:/", "national_predicted_age", glue::glue("UTM_{zone}_Age.dat")),
path_out = here::here(outpath, zone, var, glue::glue("UTM_{zone}_Age.dat")))
species_df
species_df <- to_process %>%
filter(var == "species") %>%
distinct(var, zone) %>%
mutate(path_in = here::here("M:/", "Species_2019_from_c2c_1984-2021", paste0("Species_classification_", zone, "_2019_1_leading.dat")),
path_out = here::here(outpath, zone, var, paste0("leading-species_2019_", zone, ".dat")))
species_df
age_df
process_df <- bind_rows(vlce_df,
proxies_df,
attribution_df,
metrics_df,
change_annual_df,
topo_df,
structure_df,
latlon_df,
climate_df,
species_df)
vlce_df <- to_process %>%
filter(var == "VLCE") %>%
mutate(path_in = here::here("M:/", "VLCE2.0_1984-2021", paste0("UTM_", zone), paste0("LC_Class_HMM_", zone, "_", year, "_v20_v20.dat")),
path_out = here::here(outpath, zone, paste0(var, "2.0"), paste0("LC_Class_HMM_", zone, "_", year, "_v20_v20.dat")))
attribution_df <- to_process %>%
filter(var == "change_attribution") %>%
distinct(var, zone) %>%
mutate(path_in = here::here("N:/", paste0("UTM_", zone), "Results", "Change_attribution", paste0("Attribution_UTM", zone, "_v2.dat")),
path_out = here::here(outpath, zone, var, paste0("Attribution_UTM", zone, "_v2.dat")))
metrics_df <- to_process %>%
filter(var == "change_metrics") %>%
distinct(var, zone) %>%
mutate(path_in = list(here::here("N:/", paste0("UTM_", zone), "Results", "Change_metrics") %>%
list.files(full.names = T, pattern = ".dat$"))) %>%
unnest(path_in) %>%
mutate(path_out = str_split(path_in, "/")) %>%
unnest(path_out) %>%
filter(str_detect(path_out, ".dat")) %>%
mutate(path_out = here::here(outpath, zone, var, path_out)) %>%
filter(str_detect(path_in, paste0("_", zone))) %>%
distinct(path_in, .keep_all = T)
change_annual_df <- to_process %>%
filter(var == "change_annual") %>%
filter(year > 1984 & year < 2021) %>%
mutate(path_in = here::here("N:/", paste0("UTM_", zone), "Results", "Change_attribution", "change_attributed_annually", paste0("SRef_UTM", zone, "_multiyear_attribution_", year, ".dat")),
path_out = here::here(outpath, zone, var, paste0("SRef_UTM", zone, "_", year, "_change_annual.dat")))
proxies_df <- to_process %>%
filter(var == "proxies") %>%
mutate(path_in = here::here("N:/", paste0("UTM_", zone), "Results", "proxy_values_fitted", paste0("SRef_UTM", zone, "_", year, "_fitted_proxy_v2.dat")),
path_out = here::here(outpath, zone, var, paste0("SRef_UTM", zone, "_", year, "_fitted_proxy_v2.dat")))
structure_df <- to_process %>%
filter(startsWith(var, "structure")) %>%
mutate(var = gsub("structure_", "", var),
path_in = here::here("M:/", "annual_forest_structure_unfitted_1984-2021", paste0("UTM_", zone), var, paste0("UTM_", zone, "_", var, "_", year, ".dat")),
path_out = here::here(outpath, zone, "structure", var, paste0("UTM_", zone, "_", var, "_", year, ".dat")))
topo_df <- to_process %>%
filter(var == "topography") %>%
distinct(var, zone) %>%
mutate(path_in = list(here::here("G:/", "TopoData_v3") %>%
list.files(full.names = T, pattern = ".dat$", recursive = T))) %>%
unnest(path_in) %>%
mutate(path_out = str_split(path_in, "/")) %>%
unnest(path_out) %>%
filter(str_detect(path_out, ".dat")) %>%
mutate(path_out = here::here(outpath, zone, var, path_out)) %>%
filter(str_detect(path_in, paste0("M", zone))) %>%
distinct(path_in, .keep_all = T)
latlon_df <- to_process %>%
filter(var == "lat" | var == "lon") %>%
distinct(var, zone) %>%
mutate(path_in = here::here("G:/", "ntems_lat-lon", var, paste0("UTM", zone, "_", var, ".dat")),
path_out = here::here(outpath, zone, var, paste0("UTM", zone, "_", var, ".dat")))
climate_df <- to_process %>%
filter(var == "climate") %>%
distinct(climate = var, zone) %>%
crossing(var = c("avgmaxt", "avgmint", "pcp")) %>%
select(!climate) %>%
mutate(path_in = here::here("G:/", "climate_layers_1km_corrected_spline", var, paste0("UTM", zone, "_", var, ".dat")),
path_out = here::here(outpath, zone, var, paste0("UTM", zone, "_", var, ".dat")))
species_df <- to_process %>%
filter(var == "species") %>%
distinct(var, zone) %>%
mutate(path_in = here::here("M:/", "Species_2019_from_c2c_1984-2021", paste0("Species_classification_", zone, "_2019_1_leading.dat")),
path_out = here::here(outpath, zone, var, paste0("leading-species_2019_", zone, ".dat")))
age_df <- to_process %>%
filter(var == "age") %>%
distinct(var, zone) %>%
mutate(path_in = here::here("G:/", "national_predicted_age", glue::glue("UTM_{zone}_Age.dat")),
path_out = here::here(outpath, zone, var, glue::glue("UTM_{zone}_Age.dat")))
process_df <- bind_rows(vlce_df,
proxies_df,
attribution_df,
metrics_df,
change_annual_df,
topo_df,
structure_df,
latlon_df,
climate_df,
species_df)
process_df
process_df %>% filter(var == "age")
to_process
process_df <- bind_rows(vlce_df,
proxies_df,
attribution_df,
metrics_df,
change_annual_df,
topo_df,
structure_df,
latlon_df,
climate_df,
species_df,
age_df)
to_process
process_df %>% filter(var == "age")
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
files <- list.files(here::here("D:\\", "Forest_Age"))
files <- list.files(here::here("D:\\", "Forest_Age")) %>%
list.files(recursive = T)
files
here::here("D:\\", "Forest_Age")
files <- list.files(here::here("D:", "Forest_Age")) %>%
list.files(recursive = T)
files
list.files(here::here("D:", "Forest_Age"))
here::here("D:", "Forest_Age")
here::here("D:/", "Forest_Age")
files <- list.files(here::here("D:/", "Forest_Age")) %>%
list.files(recursive = T)
files
files <- list.files(here::here("D:/", "Forest_Age"))
files
files <- list.files(here::here("D:/", "Forest_Age"), full.names = T)
files
outdir <- here::here("M:/", "Forest_Age_2019") %>%
dir.create()
outdir
outdir <- here::here("M:/", "Forest_Age_2019")
dir.create(dir.create)
dir.create(outdir)
zone = basename(file)
file = files[[1]]
zone = basename(file)
zone
zone = basename(file) %>%
utils::file_name_sans_ext()
zone = basename(file) %>%
utils::file_path_sans_ext()
zone = basename(file) %>%
tools::file_path_sans_ext()
zone
zone_dir <- here::here(outdir, glue::glue("UTM_{zone}))
zone_dir <- here::here(outdir, glue::glue("UTM_{zone}"))
zone_dir
dir.create(zone_dir)
rast(file)
myrast <- rast(file)
files
savename <- glue::glue("Forest_Age_2019_{zone}"
}
savename <- glue::glue("Forest_Age_2019_{zone}")
savename
savename <- glue::glue("Forest_Age_2019_{zone}.dat")
savename
saveloc <- here::here(zone_dir, savename)
saveloc
writeRaster(myrast, filename = saveloc, filetype = "envi")
plot(myrast)
test <- rast(saveloc)
plot(test)
test
myrast
if (!file.exists(saveloc)) {
writeRaster(myrast, filename = saveloc, filetype = "envi")
}
for(file in files) {
zone = basename(file) %>%
tools::file_path_sans_ext()
print(zone)
zone_dir <- here::here(outdir, glue::glue("UTM_{zone}"))
dir.create(zone_dir)
myrast <- rast(file)
savename <- glue::glue("Forest_Age_2019_{zone}.dat")
saveloc <- here::here(zone_dir, savename)
if (!file.exists(saveloc)) {
writeRaster(myrast, filename = saveloc, filetype = "envi")
}
}
start_time <- Sys.time()
library("tidyverse")
library("terra")
library("sf")
# temp file locations
terra_temp <-
"D:\\Temp" # save in variable because used in ntems_mosaic_gdal()
terraOptions(
memfrac = 0.75,
tempdir = terra_temp,
todisk = FALSE,
progress = 100
)
#### user inputs ####
aoi_path <-
"Z:\\ByUser\\Muise\\francois4\\Shapefiles\\Study_Area_M_nineS.shp"
listed_shps <-
list.files(
"Z:/ByUser/Muise/francois4/projected",
full.names = T,
pattern = ".shp$"
)
aoi_path <- listed_shps[[1]]
listed_shps
listed_shps <-
list.files(
"Z:/ByUser/Muise/francois4",
full.names = T,
pattern = ".shp$"
)
listed_shps
aoi_path <- listed_shps[[1]]
aoi_path
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop_multishps.R", echo=TRUE)
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
years <- c(1984:2019)
years <- 2021
# what to process?
vars <-
tibble(
VLCE = F,
# note - VLCE is always required when processing structure layers
proxies = F,
change_attribution = F,
change_metrics = F,
change_annual = F,
species = F,
age = T,
topography = F,
lat = F,
lon = F,
climate = F,
structure_basal_area = F,
structure_elev_cv = F,
structure_elev_mean = F,
structure_elev_p95 = F,
structure_elev_stddev = F,
structure_gross_stem_volume = F,
structure_loreys_height = F,
structure_percentage_first_returns_above_2m = F,
structure_percentage_first_returns_above_mean = F,
structure_total_biomass = F
) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <-
rast("D:\\Bud\\template_raster\\CA_forest_VLCE_2015.tif")
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
process_df
process_df %>% pull(path_in) %>% file.edit()
process_df %>% pull(path_in) %>% file.exists()
for (aoi_path in listed_shps) {
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
# if you want a custom outpath, comment out if you want in the same folder
#outpath <- "D:\\Bud\\francois"
years <- c(1984:2019)
years <- 2021
# what to process?
vars <-
tibble(
VLCE = F,
# note - VLCE is always required when processing structure layers
proxies = F,
change_attribution = F,
change_metrics = F,
change_annual = F,
species = F,
age = T,
topography = F,
lat = F,
lon = F,
climate = F,
structure_basal_area = F,
structure_elev_cv = F,
structure_elev_mean = F,
structure_elev_p95 = F,
structure_elev_stddev = F,
structure_gross_stem_volume = F,
structure_loreys_height = F,
structure_percentage_first_returns_above_2m = F,
structure_percentage_first_returns_above_mean = F,
structure_total_biomass = F
) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <-
rast("D:\\Bud\\template_raster\\CA_forest_VLCE_2015.tif")
#template <- rast("Z:\\ByUser\\Muise\\bc-vlce-2015.tif")
#### end user inputs ####
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
map2(process_df$path_in, process_df$path_out, ntems_crop)
if (length(utm_masks) >= 2) {
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "[0-9]{1,2}[a-zA-Z]{1}", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_[0-9]{1,2}[a-zA-Z]{1}_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM[0-9]{1,2}[a-zA-Z]{1}_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_[0-9]{1,2}[a-zA-Z]{1}_", "_"),
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore
mosaic_path = str_replace(mosaic_path, "_[0-9]{1,2}[a-zA-Z]{1}", "")
) %>%
group_split(mosaic_path)
source(here::here("scripts", "ntems_mosaic.R"))
#source(here::here("scripts", "scripts/ntems_mosaic_gdal.R"))
map(mosaic_dfs, ntems_mosaicer)
#map(mosaic_dfs, ntems_mosaicer_gdal)
}
terra::tmpFiles(remove = T)
print(Sys.time() - start_time)
}
age_df <- to_process %>%
filter(var == "age") %>%
distinct(var, zone) %>%
mutate(path_in = here::here("M:/", "Forest_Age_2019", glue::glue("UTM_{zone}") glue::glue("Forest_Age_2019_{zone}.dat")),
age_df <- to_process %>%
filter(var == "age") %>%
distinct(var, zone) %>%
mutate(path_in = here::here("M:/", "Forest_Age_2019", glue::glue("UTM_{zone}"), glue::glue("Forest_Age_2019_{zone}.dat")),
path_out = here::here(outpath, zone, var, glue::glue("Forest_Age_2019_{zone}.dat")))
age_df
process_df <- bind_rows(vlce_df,
proxies_df,
attribution_df,
metrics_df,
change_annual_df,
topo_df,
structure_df,
latlon_df,
climate_df,
species_df,
age_df)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/generate_process_df.R", echo=TRUE)
source(here::here("scripts", "generate_process_df.R"))
map2(process_df$path_in, process_df$path_out, ntems_crop)
for (aoi_path in listed_shps) {
outpath <- dirname(aoi_path) %>%
here::here(tools::file_path_sans_ext(basename(aoi_path)))
# if you want a custom outpath, comment out if you want in the same folder
#outpath <- "D:\\Bud\\francois"
years <- c(1984:2019)
years <- 2021
# what to process?
vars <-
tibble(
VLCE = F,
# note - VLCE is always required when processing structure layers
proxies = F,
change_attribution = F,
change_metrics = F,
change_annual = F,
species = F,
age = T,
topography = F,
lat = F,
lon = F,
climate = F,
structure_basal_area = F,
structure_elev_cv = F,
structure_elev_mean = F,
structure_elev_p95 = F,
structure_elev_stddev = F,
structure_gross_stem_volume = F,
structure_loreys_height = F,
structure_percentage_first_returns_above_2m = F,
structure_percentage_first_returns_above_mean = F,
structure_total_biomass = F
) %>%
pivot_longer(cols = everything()) %>%
filter(value) %>%
pull(name)
# a template raster to project to. currently, if the region is >1 UTM zone, defaults to LCC
template <-
rast("D:\\Bud\\template_raster\\CA_forest_VLCE_2015.tif")
#template <- rast("Z:\\ByUser\\Muise\\bc-vlce-2015.tif")
#### end user inputs ####
# processing from here on, user not to adjust unless they are confident in what they are doing
aoi <- read_sf(aoi_path)
# if single zone, out crs should be that utm zone
out_crs <- st_crs(aoi)
source(here::here("scripts", "get_utm_masks.R")) # generates utmzone_all
source(here::here("scripts", "get_data_type.R")) # function to make sure files save properly, shamelessly stolen from piotr
source(here::here("scripts", "ntems_crop.R"))
to_process <- crossing(year = years, zone = utmzone_all, var = vars)
source(here::here("scripts", "generate_process_df.R"))
map2(process_df$path_in, process_df$path_out, ntems_crop)
if (length(utm_masks) >= 2) {
# this is just annoying regex to clean up the mosaic output names so we can then
# split based on the mosaic paths to operate on everything using map
# basically, sorry i did this to anyone who tries to read it in post
# i've tried to add human readable comments, but regex is tough
mosaic_dfs <- process_df %>%
mutate(
mosaic_path = str_replace(path_out, "[0-9]{1,2}[a-zA-Z]{1}", "mosaiced"),
# regex that checks for 1-2 numbers, the 1 letter, and turns it to mosaiced
mosaic_path = str_replace(mosaic_path, "UTM_[0-9]{1,2}[a-zA-Z]{1}_", ""),
# regex that checks for UTM_ 1-2 numbers, then a letter, then an underscore, and removes it
mosaic_path = str_replace(mosaic_path, "UTM[0-9]{1,2}[a-zA-Z]{1}_", ""),
# regex that checks for UTM 1-2 numbers, then a letter, then and underscore, and removes it
mosaic_path = str_replace(mosaic_path, "_[0-9]{1,2}[a-zA-Z]{1}_", "_"),
# regex that checks for an underscore, 1-2 numbers, a letter, underscore, and replaces with an underscore
mosaic_path = str_replace(mosaic_path, "_[0-9]{1,2}[a-zA-Z]{1}", "")
) %>%
group_split(mosaic_path)
source(here::here("scripts", "ntems_mosaic.R"))
#source(here::here("scripts", "scripts/ntems_mosaic_gdal.R"))
map(mosaic_dfs, ntems_mosaicer)
#map(mosaic_dfs, ntems_mosaicer_gdal)
}
terra::tmpFiles(remove = T)
print(Sys.time() - start_time)
}
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop_multishps.R", echo=TRUE)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game_loop_multishps.R", echo=TRUE)
start_time <- Sys.time()
library("tidyverse")
library("terra")
library("sf")
# temp file locations
terra_temp <-
"D:\\Temp" # save in variable because used in ntems_mosaic_gdal()
terraOptions(
memfrac = 0.75,
tempdir = terra_temp,
todisk = FALSE,
progress = 100
)
#### user inputs ####
aoi_path <- "Z:\ByProject\SPL_Roads\Data\02_RMF\10_Road_Network\03_RMF_Existing_Network\RMF_Roads_Network.shp"
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
#### user inputs ####
aoi_path <- "Z:\\ByProject\\Silv21\\Shapefiles\\Quesnel.shp"
file.exists(aoi_path)
source("C:/Users/evanmuis/Desktop/ntems_cliping_terra/scripts/whole_game.R", echo=TRUE)
